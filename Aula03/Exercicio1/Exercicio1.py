# -*- coding: utf-8 -*-
"""Exercicio1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14B4kIiHLhpHNbh3YgEjiS-rlVjBxTdLs
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

dataset1 = pd.read_csv('./Aula3-dataset_1.csv')
dataset2 = pd.read_csv('./Aula3-dataset_2.csv')

dataset1.head()

X1 = dataset1.iloc[:, :-1].values
Y1 = dataset1.iloc[:, -1:].values

def predict(row, weights):
    return sum(row * weights)

def limiar(result):
    return 1 if result >= 0.0 else 0

def perceptron(X, Y, learning_rate=0.01):
    X = np.append(X, np.ones(X.shape[0]).reshape(X.shape[0], -1), axis=1)
    weights = np.random.uniform(-1, 1, X.shape[1])
    errors = []
    
    sum_error = 1
    while sum_error != 0:
        sum_error = 0.0
        for i in range(X.shape[0]):
            result = predict(X[i], weights)
            prediction = limiar(result)
            output = prediction + 1
            error = Y[i] - output
            sum_error += error**2
            weights = weights + learning_rate * error * X[i]
        errors.append(sum_error)
    return weights, errors

def linear(activation):
    prediction = 0
    if activation >= 0.5: prediction = 1
    elif prediction <= -0.5: prediction = 0
    else: prediction = activation+0.5
    
    return prediction

def adaline(X, Y, learning_rate=0.01):
    X = np.append(X, np.ones(X.shape[0]).reshape(X.shape[0], -1), axis=1)
    weights = np.random.uniform(-1, 1, X.shape[1])
    errors = []
    
    sum_error = 100
    while sum_error > 3:
        sum_error = 0.0
        for i in range(X.shape[0]):
            result = predict(X[i], weights)
            prediction = linear(result)
            output = prediction + 1
            error = Y[i] - output
            sum_error += error**2
            weights = weights + learning_rate * error * X[i]
        errors.append(sum_error)
    return weights, errors

weights, errors = perceptron(X1, Y1, learning_rate=0.003)
print(weights)

plt.plot(errors)

weights, errors = adaline(X1, Y1, learning_rate=.003)
print(weights)

plt.plot(errors)

X2 = dataset2.iloc[:, :-1].values
Y2 = dataset2.iloc[:, -1:].values

weights, errors = perceptron(X2, Y2, learning_rate=0.003)
plt.plot(errors)

weights, errors = adaline(X2, Y2, learning_rate=.003)
plt.plot(errors)